// Code generated by Kitex v0.12.1. DO NOT EDIT.

package zkserver_operation

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "nrMQ/kitex_gen/api"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateTopic": kitex.NewMethodInfo(
		createTopicHandler,
		newZkServer_OperationCreateTopicArgs,
		newZkServer_OperationCreateTopicResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreatePart": kitex.NewMethodInfo(
		createPartHandler,
		newZkServer_OperationCreatePartArgs,
		newZkServer_OperationCreatePartResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ProGetBroker": kitex.NewMethodInfo(
		proGetBrokerHandler,
		newZkServer_OperationProGetBrokerArgs,
		newZkServer_OperationProGetBrokerResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetPartitionState": kitex.NewMethodInfo(
		setPartitionStateHandler,
		newZkServer_OperationSetPartitionStateArgs,
		newZkServer_OperationSetPartitionStateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Sub": kitex.NewMethodInfo(
		subHandler,
		newZkServer_OperationSubArgs,
		newZkServer_OperationSubResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ConStartGetBroker": kitex.NewMethodInfo(
		conStartGetBrokerHandler,
		newZkServer_OperationConStartGetBrokerArgs,
		newZkServer_OperationConStartGetBrokerResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	zkServer_OperationServiceInfo                = NewServiceInfo()
	zkServer_OperationServiceInfoForClient       = NewServiceInfoForClient()
	zkServer_OperationServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return zkServer_OperationServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return zkServer_OperationServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return zkServer_OperationServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ZkServer_Operation"
	handlerType := (*api.ZkServer_Operation)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func createTopicHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationCreateTopicArgs)
	realResult := result.(*api.ZkServer_OperationCreateTopicResult)
	success, err := handler.(api.ZkServer_Operation).CreateTopic(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationCreateTopicArgs() interface{} {
	return api.NewZkServer_OperationCreateTopicArgs()
}

func newZkServer_OperationCreateTopicResult() interface{} {
	return api.NewZkServer_OperationCreateTopicResult()
}

func createPartHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationCreatePartArgs)
	realResult := result.(*api.ZkServer_OperationCreatePartResult)
	success, err := handler.(api.ZkServer_Operation).CreatePart(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationCreatePartArgs() interface{} {
	return api.NewZkServer_OperationCreatePartArgs()
}

func newZkServer_OperationCreatePartResult() interface{} {
	return api.NewZkServer_OperationCreatePartResult()
}

func proGetBrokerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationProGetBrokerArgs)
	realResult := result.(*api.ZkServer_OperationProGetBrokerResult)
	success, err := handler.(api.ZkServer_Operation).ProGetBroker(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationProGetBrokerArgs() interface{} {
	return api.NewZkServer_OperationProGetBrokerArgs()
}

func newZkServer_OperationProGetBrokerResult() interface{} {
	return api.NewZkServer_OperationProGetBrokerResult()
}

func setPartitionStateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationSetPartitionStateArgs)
	realResult := result.(*api.ZkServer_OperationSetPartitionStateResult)
	success, err := handler.(api.ZkServer_Operation).SetPartitionState(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationSetPartitionStateArgs() interface{} {
	return api.NewZkServer_OperationSetPartitionStateArgs()
}

func newZkServer_OperationSetPartitionStateResult() interface{} {
	return api.NewZkServer_OperationSetPartitionStateResult()
}

func subHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationSubArgs)
	realResult := result.(*api.ZkServer_OperationSubResult)
	success, err := handler.(api.ZkServer_Operation).Sub(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationSubArgs() interface{} {
	return api.NewZkServer_OperationSubArgs()
}

func newZkServer_OperationSubResult() interface{} {
	return api.NewZkServer_OperationSubResult()
}

func conStartGetBrokerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationConStartGetBrokerArgs)
	realResult := result.(*api.ZkServer_OperationConStartGetBrokerResult)
	success, err := handler.(api.ZkServer_Operation).ConStartGetBroker(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationConStartGetBrokerArgs() interface{} {
	return api.NewZkServer_OperationConStartGetBrokerArgs()
}

func newZkServer_OperationConStartGetBrokerResult() interface{} {
	return api.NewZkServer_OperationConStartGetBrokerResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateTopic(ctx context.Context, req *api.CreateTopicRequest) (r *api.CreateTopicResponse, err error) {
	var _args api.ZkServer_OperationCreateTopicArgs
	_args.Req = req
	var _result api.ZkServer_OperationCreateTopicResult
	if err = p.c.Call(ctx, "CreateTopic", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreatePart(ctx context.Context, req *api.CreatePartRequest) (r *api.CreatePartResponse, err error) {
	var _args api.ZkServer_OperationCreatePartArgs
	_args.Req = req
	var _result api.ZkServer_OperationCreatePartResult
	if err = p.c.Call(ctx, "CreatePart", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProGetBroker(ctx context.Context, req *api.ProGetBrokRequest) (r *api.ProGetBrokResponse, err error) {
	var _args api.ZkServer_OperationProGetBrokerArgs
	_args.Req = req
	var _result api.ZkServer_OperationProGetBrokerResult
	if err = p.c.Call(ctx, "ProGetBroker", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetPartitionState(ctx context.Context, req *api.SetPartitionStateRequest) (r *api.SetPartitionStateResponse, err error) {
	var _args api.ZkServer_OperationSetPartitionStateArgs
	_args.Req = req
	var _result api.ZkServer_OperationSetPartitionStateResult
	if err = p.c.Call(ctx, "SetPartitionState", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Sub(ctx context.Context, req *api.SubRequest) (r *api.SubResponse, err error) {
	var _args api.ZkServer_OperationSubArgs
	_args.Req = req
	var _result api.ZkServer_OperationSubResult
	if err = p.c.Call(ctx, "Sub", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ConStartGetBroker(ctx context.Context, req *api.ConStartGetBrokRequest) (r *api.ConStartGetBrokResponse, err error) {
	var _args api.ZkServer_OperationConStartGetBrokerArgs
	_args.Req = req
	var _result api.ZkServer_OperationConStartGetBrokerResult
	if err = p.c.Call(ctx, "ConStartGetBroker", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
