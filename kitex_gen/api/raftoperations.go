// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
	"strings"
)

type RequestVoteArgs_ struct {
	Term         int8   `thrift:"term,1" frugal:"1,default,i8" json:"term"`
	CandidateId  int8   `thrift:"candidateId,2" frugal:"2,default,i8" json:"candidateId"`
	LastLogIndex int8   `thrift:"lastLogIndex,3" frugal:"3,default,i8" json:"lastLogIndex"`
	LastLogTerm  int8   `thrift:"lastLogTerm,4" frugal:"4,default,i8" json:"lastLogTerm"`
	TopicName    string `thrift:"topicName,5" frugal:"5,default,string" json:"topicName"`
	PartName     string `thrift:"partName,6" frugal:"6,default,string" json:"partName"`
}

func NewRequestVoteArgs_() *RequestVoteArgs_ {
	return &RequestVoteArgs_{}
}

func (p *RequestVoteArgs_) InitDefault() {
}

func (p *RequestVoteArgs_) GetTerm() (v int8) {
	return p.Term
}

func (p *RequestVoteArgs_) GetCandidateId() (v int8) {
	return p.CandidateId
}

func (p *RequestVoteArgs_) GetLastLogIndex() (v int8) {
	return p.LastLogIndex
}

func (p *RequestVoteArgs_) GetLastLogTerm() (v int8) {
	return p.LastLogTerm
}

func (p *RequestVoteArgs_) GetTopicName() (v string) {
	return p.TopicName
}

func (p *RequestVoteArgs_) GetPartName() (v string) {
	return p.PartName
}
func (p *RequestVoteArgs_) SetTerm(val int8) {
	p.Term = val
}
func (p *RequestVoteArgs_) SetCandidateId(val int8) {
	p.CandidateId = val
}
func (p *RequestVoteArgs_) SetLastLogIndex(val int8) {
	p.LastLogIndex = val
}
func (p *RequestVoteArgs_) SetLastLogTerm(val int8) {
	p.LastLogTerm = val
}
func (p *RequestVoteArgs_) SetTopicName(val string) {
	p.TopicName = val
}
func (p *RequestVoteArgs_) SetPartName(val string) {
	p.PartName = val
}

var fieldIDToName_RequestVoteArgs_ = map[int16]string{
	1: "term",
	2: "candidateId",
	3: "lastLogIndex",
	4: "lastLogTerm",
	5: "topicName",
	6: "partName",
}

func (p *RequestVoteArgs_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RequestVoteArgs_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RequestVoteArgs_) ReadField1(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Term = _field
	return nil
}
func (p *RequestVoteArgs_) ReadField2(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CandidateId = _field
	return nil
}
func (p *RequestVoteArgs_) ReadField3(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LastLogIndex = _field
	return nil
}
func (p *RequestVoteArgs_) ReadField4(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LastLogTerm = _field
	return nil
}
func (p *RequestVoteArgs_) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TopicName = _field
	return nil
}
func (p *RequestVoteArgs_) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PartName = _field
	return nil
}

func (p *RequestVoteArgs_) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RequestVoteArgs"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RequestVoteArgs_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("term", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Term); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RequestVoteArgs_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("candidateId", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.CandidateId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RequestVoteArgs_) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("lastLogIndex", thrift.BYTE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.LastLogIndex); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *RequestVoteArgs_) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("lastLogTerm", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.LastLogTerm); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *RequestVoteArgs_) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("topicName", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TopicName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *RequestVoteArgs_) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("partName", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PartName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *RequestVoteArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestVoteArgs_(%+v)", *p)

}

func (p *RequestVoteArgs_) DeepEqual(ano *RequestVoteArgs_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Term) {
		return false
	}
	if !p.Field2DeepEqual(ano.CandidateId) {
		return false
	}
	if !p.Field3DeepEqual(ano.LastLogIndex) {
		return false
	}
	if !p.Field4DeepEqual(ano.LastLogTerm) {
		return false
	}
	if !p.Field5DeepEqual(ano.TopicName) {
		return false
	}
	if !p.Field6DeepEqual(ano.PartName) {
		return false
	}
	return true
}

func (p *RequestVoteArgs_) Field1DeepEqual(src int8) bool {

	if p.Term != src {
		return false
	}
	return true
}
func (p *RequestVoteArgs_) Field2DeepEqual(src int8) bool {

	if p.CandidateId != src {
		return false
	}
	return true
}
func (p *RequestVoteArgs_) Field3DeepEqual(src int8) bool {

	if p.LastLogIndex != src {
		return false
	}
	return true
}
func (p *RequestVoteArgs_) Field4DeepEqual(src int8) bool {

	if p.LastLogTerm != src {
		return false
	}
	return true
}
func (p *RequestVoteArgs_) Field5DeepEqual(src string) bool {

	if strings.Compare(p.TopicName, src) != 0 {
		return false
	}
	return true
}
func (p *RequestVoteArgs_) Field6DeepEqual(src string) bool {

	if strings.Compare(p.PartName, src) != 0 {
		return false
	}
	return true
}

type RequestVoteReply struct {
	Term        int8 `thrift:"term,1" frugal:"1,default,i8" json:"term"`
	VoteGranted bool `thrift:"voteGranted,2" frugal:"2,default,bool" json:"voteGranted"`
}

func NewRequestVoteReply() *RequestVoteReply {
	return &RequestVoteReply{}
}

func (p *RequestVoteReply) InitDefault() {
}

func (p *RequestVoteReply) GetTerm() (v int8) {
	return p.Term
}

func (p *RequestVoteReply) GetVoteGranted() (v bool) {
	return p.VoteGranted
}
func (p *RequestVoteReply) SetTerm(val int8) {
	p.Term = val
}
func (p *RequestVoteReply) SetVoteGranted(val bool) {
	p.VoteGranted = val
}

var fieldIDToName_RequestVoteReply = map[int16]string{
	1: "term",
	2: "voteGranted",
}

func (p *RequestVoteReply) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RequestVoteReply[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RequestVoteReply) ReadField1(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Term = _field
	return nil
}
func (p *RequestVoteReply) ReadField2(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VoteGranted = _field
	return nil
}

func (p *RequestVoteReply) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RequestVoteReply"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RequestVoteReply) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("term", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Term); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RequestVoteReply) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("voteGranted", thrift.BOOL, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.VoteGranted); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RequestVoteReply) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestVoteReply(%+v)", *p)

}

func (p *RequestVoteReply) DeepEqual(ano *RequestVoteReply) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Term) {
		return false
	}
	if !p.Field2DeepEqual(ano.VoteGranted) {
		return false
	}
	return true
}

func (p *RequestVoteReply) Field1DeepEqual(src int8) bool {

	if p.Term != src {
		return false
	}
	return true
}
func (p *RequestVoteReply) Field2DeepEqual(src bool) bool {

	if p.VoteGranted != src {
		return false
	}
	return true
}

type AppendEntriesArgs_ struct {
	Term         int8   `thrift:"term,1" frugal:"1,default,i8" json:"term"`
	LeaderId     int8   `thrift:"leaderId,2" frugal:"2,default,i8" json:"leaderId"`
	PrevLogIndex int8   `thrift:"prevLogIndex,3" frugal:"3,default,i8" json:"prevLogIndex"`
	PrevLogTerm  int8   `thrift:"prevLogTerm,4" frugal:"4,default,i8" json:"prevLogTerm"`
	Log          []byte `thrift:"log,5" frugal:"5,default,binary" json:"log"`
	LeaderCommit int8   `thrift:"leaderCommit,6" frugal:"6,default,i8" json:"leaderCommit"`
	LogIndex     int8   `thrift:"logIndex,7" frugal:"7,default,i8" json:"logIndex"`
	TopicName    string `thrift:"topicName,8" frugal:"8,default,string" json:"topicName"`
	PartName     string `thrift:"partName,9" frugal:"9,default,string" json:"partName"`
}

func NewAppendEntriesArgs_() *AppendEntriesArgs_ {
	return &AppendEntriesArgs_{}
}

func (p *AppendEntriesArgs_) InitDefault() {
}

func (p *AppendEntriesArgs_) GetTerm() (v int8) {
	return p.Term
}

func (p *AppendEntriesArgs_) GetLeaderId() (v int8) {
	return p.LeaderId
}

func (p *AppendEntriesArgs_) GetPrevLogIndex() (v int8) {
	return p.PrevLogIndex
}

func (p *AppendEntriesArgs_) GetPrevLogTerm() (v int8) {
	return p.PrevLogTerm
}

func (p *AppendEntriesArgs_) GetLog() (v []byte) {
	return p.Log
}

func (p *AppendEntriesArgs_) GetLeaderCommit() (v int8) {
	return p.LeaderCommit
}

func (p *AppendEntriesArgs_) GetLogIndex() (v int8) {
	return p.LogIndex
}

func (p *AppendEntriesArgs_) GetTopicName() (v string) {
	return p.TopicName
}

func (p *AppendEntriesArgs_) GetPartName() (v string) {
	return p.PartName
}
func (p *AppendEntriesArgs_) SetTerm(val int8) {
	p.Term = val
}
func (p *AppendEntriesArgs_) SetLeaderId(val int8) {
	p.LeaderId = val
}
func (p *AppendEntriesArgs_) SetPrevLogIndex(val int8) {
	p.PrevLogIndex = val
}
func (p *AppendEntriesArgs_) SetPrevLogTerm(val int8) {
	p.PrevLogTerm = val
}
func (p *AppendEntriesArgs_) SetLog(val []byte) {
	p.Log = val
}
func (p *AppendEntriesArgs_) SetLeaderCommit(val int8) {
	p.LeaderCommit = val
}
func (p *AppendEntriesArgs_) SetLogIndex(val int8) {
	p.LogIndex = val
}
func (p *AppendEntriesArgs_) SetTopicName(val string) {
	p.TopicName = val
}
func (p *AppendEntriesArgs_) SetPartName(val string) {
	p.PartName = val
}

var fieldIDToName_AppendEntriesArgs_ = map[int16]string{
	1: "term",
	2: "leaderId",
	3: "prevLogIndex",
	4: "prevLogTerm",
	5: "log",
	6: "leaderCommit",
	7: "logIndex",
	8: "topicName",
	9: "partName",
}

func (p *AppendEntriesArgs_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppendEntriesArgs_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppendEntriesArgs_) ReadField1(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Term = _field
	return nil
}
func (p *AppendEntriesArgs_) ReadField2(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LeaderId = _field
	return nil
}
func (p *AppendEntriesArgs_) ReadField3(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PrevLogIndex = _field
	return nil
}
func (p *AppendEntriesArgs_) ReadField4(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PrevLogTerm = _field
	return nil
}
func (p *AppendEntriesArgs_) ReadField5(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Log = _field
	return nil
}
func (p *AppendEntriesArgs_) ReadField6(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LeaderCommit = _field
	return nil
}
func (p *AppendEntriesArgs_) ReadField7(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LogIndex = _field
	return nil
}
func (p *AppendEntriesArgs_) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TopicName = _field
	return nil
}
func (p *AppendEntriesArgs_) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PartName = _field
	return nil
}

func (p *AppendEntriesArgs_) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("AppendEntriesArgs"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppendEntriesArgs_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("term", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Term); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppendEntriesArgs_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("leaderId", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.LeaderId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AppendEntriesArgs_) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("prevLogIndex", thrift.BYTE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.PrevLogIndex); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AppendEntriesArgs_) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("prevLogTerm", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.PrevLogTerm); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *AppendEntriesArgs_) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("log", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Log)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *AppendEntriesArgs_) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("leaderCommit", thrift.BYTE, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.LeaderCommit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *AppendEntriesArgs_) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("logIndex", thrift.BYTE, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.LogIndex); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *AppendEntriesArgs_) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("topicName", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TopicName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *AppendEntriesArgs_) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("partName", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PartName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *AppendEntriesArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendEntriesArgs_(%+v)", *p)

}

func (p *AppendEntriesArgs_) DeepEqual(ano *AppendEntriesArgs_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Term) {
		return false
	}
	if !p.Field2DeepEqual(ano.LeaderId) {
		return false
	}
	if !p.Field3DeepEqual(ano.PrevLogIndex) {
		return false
	}
	if !p.Field4DeepEqual(ano.PrevLogTerm) {
		return false
	}
	if !p.Field5DeepEqual(ano.Log) {
		return false
	}
	if !p.Field6DeepEqual(ano.LeaderCommit) {
		return false
	}
	if !p.Field7DeepEqual(ano.LogIndex) {
		return false
	}
	if !p.Field8DeepEqual(ano.TopicName) {
		return false
	}
	if !p.Field9DeepEqual(ano.PartName) {
		return false
	}
	return true
}

func (p *AppendEntriesArgs_) Field1DeepEqual(src int8) bool {

	if p.Term != src {
		return false
	}
	return true
}
func (p *AppendEntriesArgs_) Field2DeepEqual(src int8) bool {

	if p.LeaderId != src {
		return false
	}
	return true
}
func (p *AppendEntriesArgs_) Field3DeepEqual(src int8) bool {

	if p.PrevLogIndex != src {
		return false
	}
	return true
}
func (p *AppendEntriesArgs_) Field4DeepEqual(src int8) bool {

	if p.PrevLogTerm != src {
		return false
	}
	return true
}
func (p *AppendEntriesArgs_) Field5DeepEqual(src []byte) bool {

	if bytes.Compare(p.Log, src) != 0 {
		return false
	}
	return true
}
func (p *AppendEntriesArgs_) Field6DeepEqual(src int8) bool {

	if p.LeaderCommit != src {
		return false
	}
	return true
}
func (p *AppendEntriesArgs_) Field7DeepEqual(src int8) bool {

	if p.LogIndex != src {
		return false
	}
	return true
}
func (p *AppendEntriesArgs_) Field8DeepEqual(src string) bool {

	if strings.Compare(p.TopicName, src) != 0 {
		return false
	}
	return true
}
func (p *AppendEntriesArgs_) Field9DeepEqual(src string) bool {

	if strings.Compare(p.PartName, src) != 0 {
		return false
	}
	return true
}

type AppendEntriesReply struct {
	Term    int8 `thrift:"term,1" frugal:"1,default,i8" json:"term"`
	Success bool `thrift:"success,2" frugal:"2,default,bool" json:"success"`
	XTerm   int8 `thrift:"xTerm,3" frugal:"3,default,i8" json:"xTerm"`
	XIndex  int8 `thrift:"xIndex,4" frugal:"4,default,i8" json:"xIndex"`
}

func NewAppendEntriesReply() *AppendEntriesReply {
	return &AppendEntriesReply{}
}

func (p *AppendEntriesReply) InitDefault() {
}

func (p *AppendEntriesReply) GetTerm() (v int8) {
	return p.Term
}

func (p *AppendEntriesReply) GetSuccess() (v bool) {
	return p.Success
}

func (p *AppendEntriesReply) GetXTerm() (v int8) {
	return p.XTerm
}

func (p *AppendEntriesReply) GetXIndex() (v int8) {
	return p.XIndex
}
func (p *AppendEntriesReply) SetTerm(val int8) {
	p.Term = val
}
func (p *AppendEntriesReply) SetSuccess(val bool) {
	p.Success = val
}
func (p *AppendEntriesReply) SetXTerm(val int8) {
	p.XTerm = val
}
func (p *AppendEntriesReply) SetXIndex(val int8) {
	p.XIndex = val
}

var fieldIDToName_AppendEntriesReply = map[int16]string{
	1: "term",
	2: "success",
	3: "xTerm",
	4: "xIndex",
}

func (p *AppendEntriesReply) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppendEntriesReply[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppendEntriesReply) ReadField1(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Term = _field
	return nil
}
func (p *AppendEntriesReply) ReadField2(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Success = _field
	return nil
}
func (p *AppendEntriesReply) ReadField3(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.XTerm = _field
	return nil
}
func (p *AppendEntriesReply) ReadField4(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.XIndex = _field
	return nil
}

func (p *AppendEntriesReply) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("AppendEntriesReply"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppendEntriesReply) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("term", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Term); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppendEntriesReply) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("success", thrift.BOOL, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Success); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AppendEntriesReply) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("xTerm", thrift.BYTE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.XTerm); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AppendEntriesReply) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("xIndex", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.XIndex); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *AppendEntriesReply) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendEntriesReply(%+v)", *p)

}

func (p *AppendEntriesReply) DeepEqual(ano *AppendEntriesReply) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Term) {
		return false
	}
	if !p.Field2DeepEqual(ano.Success) {
		return false
	}
	if !p.Field3DeepEqual(ano.XTerm) {
		return false
	}
	if !p.Field4DeepEqual(ano.XIndex) {
		return false
	}
	return true
}

func (p *AppendEntriesReply) Field1DeepEqual(src int8) bool {

	if p.Term != src {
		return false
	}
	return true
}
func (p *AppendEntriesReply) Field2DeepEqual(src bool) bool {

	if p.Success != src {
		return false
	}
	return true
}
func (p *AppendEntriesReply) Field3DeepEqual(src int8) bool {

	if p.XTerm != src {
		return false
	}
	return true
}
func (p *AppendEntriesReply) Field4DeepEqual(src int8) bool {

	if p.XIndex != src {
		return false
	}
	return true
}

type InstallSnapshotArgs_ struct {
	Term              int8   `thrift:"term,1" frugal:"1,default,i8" json:"term"`
	LeaderId          int8   `thrift:"leaderId,2" frugal:"2,default,i8" json:"leaderId"`
	LastIncludedIndex int8   `thrift:"lastIncludedIndex,3" frugal:"3,default,i8" json:"lastIncludedIndex"`
	LastIncludedTerm  int8   `thrift:"lastIncludedTerm,4" frugal:"4,default,i8" json:"lastIncludedTerm"`
	Snapshot          []byte `thrift:"snapshot,5" frugal:"5,default,binary" json:"snapshot"`
	TopicName         string `thrift:"topicName,6" frugal:"6,default,string" json:"topicName"`
	PartName          string `thrift:"partName,7" frugal:"7,default,string" json:"partName"`
}

func NewInstallSnapshotArgs_() *InstallSnapshotArgs_ {
	return &InstallSnapshotArgs_{}
}

func (p *InstallSnapshotArgs_) InitDefault() {
}

func (p *InstallSnapshotArgs_) GetTerm() (v int8) {
	return p.Term
}

func (p *InstallSnapshotArgs_) GetLeaderId() (v int8) {
	return p.LeaderId
}

func (p *InstallSnapshotArgs_) GetLastIncludedIndex() (v int8) {
	return p.LastIncludedIndex
}

func (p *InstallSnapshotArgs_) GetLastIncludedTerm() (v int8) {
	return p.LastIncludedTerm
}

func (p *InstallSnapshotArgs_) GetSnapshot() (v []byte) {
	return p.Snapshot
}

func (p *InstallSnapshotArgs_) GetTopicName() (v string) {
	return p.TopicName
}

func (p *InstallSnapshotArgs_) GetPartName() (v string) {
	return p.PartName
}
func (p *InstallSnapshotArgs_) SetTerm(val int8) {
	p.Term = val
}
func (p *InstallSnapshotArgs_) SetLeaderId(val int8) {
	p.LeaderId = val
}
func (p *InstallSnapshotArgs_) SetLastIncludedIndex(val int8) {
	p.LastIncludedIndex = val
}
func (p *InstallSnapshotArgs_) SetLastIncludedTerm(val int8) {
	p.LastIncludedTerm = val
}
func (p *InstallSnapshotArgs_) SetSnapshot(val []byte) {
	p.Snapshot = val
}
func (p *InstallSnapshotArgs_) SetTopicName(val string) {
	p.TopicName = val
}
func (p *InstallSnapshotArgs_) SetPartName(val string) {
	p.PartName = val
}

var fieldIDToName_InstallSnapshotArgs_ = map[int16]string{
	1: "term",
	2: "leaderId",
	3: "lastIncludedIndex",
	4: "lastIncludedTerm",
	5: "snapshot",
	6: "topicName",
	7: "partName",
}

func (p *InstallSnapshotArgs_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InstallSnapshotArgs_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InstallSnapshotArgs_) ReadField1(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Term = _field
	return nil
}
func (p *InstallSnapshotArgs_) ReadField2(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LeaderId = _field
	return nil
}
func (p *InstallSnapshotArgs_) ReadField3(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LastIncludedIndex = _field
	return nil
}
func (p *InstallSnapshotArgs_) ReadField4(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LastIncludedTerm = _field
	return nil
}
func (p *InstallSnapshotArgs_) ReadField5(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Snapshot = _field
	return nil
}
func (p *InstallSnapshotArgs_) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TopicName = _field
	return nil
}
func (p *InstallSnapshotArgs_) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PartName = _field
	return nil
}

func (p *InstallSnapshotArgs_) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("InstallSnapshotArgs"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InstallSnapshotArgs_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("term", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Term); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InstallSnapshotArgs_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("leaderId", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.LeaderId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *InstallSnapshotArgs_) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("lastIncludedIndex", thrift.BYTE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.LastIncludedIndex); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *InstallSnapshotArgs_) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("lastIncludedTerm", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.LastIncludedTerm); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *InstallSnapshotArgs_) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("snapshot", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Snapshot)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *InstallSnapshotArgs_) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("topicName", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TopicName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *InstallSnapshotArgs_) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("partName", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PartName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *InstallSnapshotArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstallSnapshotArgs_(%+v)", *p)

}

func (p *InstallSnapshotArgs_) DeepEqual(ano *InstallSnapshotArgs_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Term) {
		return false
	}
	if !p.Field2DeepEqual(ano.LeaderId) {
		return false
	}
	if !p.Field3DeepEqual(ano.LastIncludedIndex) {
		return false
	}
	if !p.Field4DeepEqual(ano.LastIncludedTerm) {
		return false
	}
	if !p.Field5DeepEqual(ano.Snapshot) {
		return false
	}
	if !p.Field6DeepEqual(ano.TopicName) {
		return false
	}
	if !p.Field7DeepEqual(ano.PartName) {
		return false
	}
	return true
}

func (p *InstallSnapshotArgs_) Field1DeepEqual(src int8) bool {

	if p.Term != src {
		return false
	}
	return true
}
func (p *InstallSnapshotArgs_) Field2DeepEqual(src int8) bool {

	if p.LeaderId != src {
		return false
	}
	return true
}
func (p *InstallSnapshotArgs_) Field3DeepEqual(src int8) bool {

	if p.LastIncludedIndex != src {
		return false
	}
	return true
}
func (p *InstallSnapshotArgs_) Field4DeepEqual(src int8) bool {

	if p.LastIncludedTerm != src {
		return false
	}
	return true
}
func (p *InstallSnapshotArgs_) Field5DeepEqual(src []byte) bool {

	if bytes.Compare(p.Snapshot, src) != 0 {
		return false
	}
	return true
}
func (p *InstallSnapshotArgs_) Field6DeepEqual(src string) bool {

	if strings.Compare(p.TopicName, src) != 0 {
		return false
	}
	return true
}
func (p *InstallSnapshotArgs_) Field7DeepEqual(src string) bool {

	if strings.Compare(p.PartName, src) != 0 {
		return false
	}
	return true
}

type InstallSnapshotReply struct {
	Term    int8 `thrift:"term,1" frugal:"1,default,i8" json:"term"`
	Success bool `thrift:"success,2" frugal:"2,default,bool" json:"success"`
}

func NewInstallSnapshotReply() *InstallSnapshotReply {
	return &InstallSnapshotReply{}
}

func (p *InstallSnapshotReply) InitDefault() {
}

func (p *InstallSnapshotReply) GetTerm() (v int8) {
	return p.Term
}

func (p *InstallSnapshotReply) GetSuccess() (v bool) {
	return p.Success
}
func (p *InstallSnapshotReply) SetTerm(val int8) {
	p.Term = val
}
func (p *InstallSnapshotReply) SetSuccess(val bool) {
	p.Success = val
}

var fieldIDToName_InstallSnapshotReply = map[int16]string{
	1: "term",
	2: "success",
}

func (p *InstallSnapshotReply) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InstallSnapshotReply[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InstallSnapshotReply) ReadField1(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Term = _field
	return nil
}
func (p *InstallSnapshotReply) ReadField2(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Success = _field
	return nil
}

func (p *InstallSnapshotReply) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("InstallSnapshotReply"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InstallSnapshotReply) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("term", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Term); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InstallSnapshotReply) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("success", thrift.BOOL, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Success); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *InstallSnapshotReply) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstallSnapshotReply(%+v)", *p)

}

func (p *InstallSnapshotReply) DeepEqual(ano *InstallSnapshotReply) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Term) {
		return false
	}
	if !p.Field2DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InstallSnapshotReply) Field1DeepEqual(src int8) bool {

	if p.Term != src {
		return false
	}
	return true
}
func (p *InstallSnapshotReply) Field2DeepEqual(src bool) bool {

	if p.Success != src {
		return false
	}
	return true
}

type PingPongArgs_ struct {
	Ping bool `thrift:"ping,1" frugal:"1,default,bool" json:"ping"`
}

func NewPingPongArgs_() *PingPongArgs_ {
	return &PingPongArgs_{}
}

func (p *PingPongArgs_) InitDefault() {
}

func (p *PingPongArgs_) GetPing() (v bool) {
	return p.Ping
}
func (p *PingPongArgs_) SetPing(val bool) {
	p.Ping = val
}

var fieldIDToName_PingPongArgs_ = map[int16]string{
	1: "ping",
}

func (p *PingPongArgs_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PingPongArgs_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PingPongArgs_) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Ping = _field
	return nil
}

func (p *PingPongArgs_) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("PingPongArgs"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PingPongArgs_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ping", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Ping); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PingPongArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingPongArgs_(%+v)", *p)

}

func (p *PingPongArgs_) DeepEqual(ano *PingPongArgs_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ping) {
		return false
	}
	return true
}

func (p *PingPongArgs_) Field1DeepEqual(src bool) bool {

	if p.Ping != src {
		return false
	}
	return true
}

type PingPongReply struct {
	Pong bool `thrift:"pong,1" frugal:"1,default,bool" json:"pong"`
}

func NewPingPongReply() *PingPongReply {
	return &PingPongReply{}
}

func (p *PingPongReply) InitDefault() {
}

func (p *PingPongReply) GetPong() (v bool) {
	return p.Pong
}
func (p *PingPongReply) SetPong(val bool) {
	p.Pong = val
}

var fieldIDToName_PingPongReply = map[int16]string{
	1: "pong",
}

func (p *PingPongReply) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PingPongReply[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PingPongReply) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Pong = _field
	return nil
}

func (p *PingPongReply) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("PingPongReply"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PingPongReply) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pong", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Pong); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PingPongReply) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingPongReply(%+v)", *p)

}

func (p *PingPongReply) DeepEqual(ano *PingPongReply) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Pong) {
		return false
	}
	return true
}

func (p *PingPongReply) Field1DeepEqual(src bool) bool {

	if p.Pong != src {
		return false
	}
	return true
}

type Raft_Operations interface {
	RequestVote(ctx context.Context, args_ *RequestVoteArgs_) (r *RequestVoteReply, err error)

	AppendEntries(ctx context.Context, args_ *AppendEntriesArgs_) (r *AppendEntriesReply, err error)

	InstallSnapshot(ctx context.Context, args_ *InstallSnapshotArgs_) (r *InstallSnapshotReply, err error)

	Pingpongtest(ctx context.Context, req *PingPongArgs_) (r *PingPongReply, err error)
}

type Raft_OperationsRequestVoteArgs struct {
	Args_ *RequestVoteArgs_ `thrift:"args,1" frugal:"1,default,RequestVoteArgs_" json:"args"`
}

func NewRaft_OperationsRequestVoteArgs() *Raft_OperationsRequestVoteArgs {
	return &Raft_OperationsRequestVoteArgs{}
}

func (p *Raft_OperationsRequestVoteArgs) InitDefault() {
}

var Raft_OperationsRequestVoteArgs_Args__DEFAULT *RequestVoteArgs_

func (p *Raft_OperationsRequestVoteArgs) GetArgs_() (v *RequestVoteArgs_) {
	if !p.IsSetArgs_() {
		return Raft_OperationsRequestVoteArgs_Args__DEFAULT
	}
	return p.Args_
}
func (p *Raft_OperationsRequestVoteArgs) SetArgs_(val *RequestVoteArgs_) {
	p.Args_ = val
}

var fieldIDToName_Raft_OperationsRequestVoteArgs = map[int16]string{
	1: "args",
}

func (p *Raft_OperationsRequestVoteArgs) IsSetArgs_() bool {
	return p.Args_ != nil
}

func (p *Raft_OperationsRequestVoteArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Raft_OperationsRequestVoteArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Raft_OperationsRequestVoteArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRequestVoteArgs_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Args_ = _field
	return nil
}

func (p *Raft_OperationsRequestVoteArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RequestVote_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Raft_OperationsRequestVoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("args", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Args_.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Raft_OperationsRequestVoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsRequestVoteArgs(%+v)", *p)

}

func (p *Raft_OperationsRequestVoteArgs) DeepEqual(ano *Raft_OperationsRequestVoteArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Args_) {
		return false
	}
	return true
}

func (p *Raft_OperationsRequestVoteArgs) Field1DeepEqual(src *RequestVoteArgs_) bool {

	if !p.Args_.DeepEqual(src) {
		return false
	}
	return true
}

type Raft_OperationsRequestVoteResult struct {
	Success *RequestVoteReply `thrift:"success,0,optional" frugal:"0,optional,RequestVoteReply" json:"success,omitempty"`
}

func NewRaft_OperationsRequestVoteResult() *Raft_OperationsRequestVoteResult {
	return &Raft_OperationsRequestVoteResult{}
}

func (p *Raft_OperationsRequestVoteResult) InitDefault() {
}

var Raft_OperationsRequestVoteResult_Success_DEFAULT *RequestVoteReply

func (p *Raft_OperationsRequestVoteResult) GetSuccess() (v *RequestVoteReply) {
	if !p.IsSetSuccess() {
		return Raft_OperationsRequestVoteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Raft_OperationsRequestVoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*RequestVoteReply)
}

var fieldIDToName_Raft_OperationsRequestVoteResult = map[int16]string{
	0: "success",
}

func (p *Raft_OperationsRequestVoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Raft_OperationsRequestVoteResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Raft_OperationsRequestVoteResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Raft_OperationsRequestVoteResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRequestVoteReply()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *Raft_OperationsRequestVoteResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RequestVote_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Raft_OperationsRequestVoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *Raft_OperationsRequestVoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsRequestVoteResult(%+v)", *p)

}

func (p *Raft_OperationsRequestVoteResult) DeepEqual(ano *Raft_OperationsRequestVoteResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *Raft_OperationsRequestVoteResult) Field0DeepEqual(src *RequestVoteReply) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type Raft_OperationsAppendEntriesArgs struct {
	Args_ *AppendEntriesArgs_ `thrift:"args,1" frugal:"1,default,AppendEntriesArgs_" json:"args"`
}

func NewRaft_OperationsAppendEntriesArgs() *Raft_OperationsAppendEntriesArgs {
	return &Raft_OperationsAppendEntriesArgs{}
}

func (p *Raft_OperationsAppendEntriesArgs) InitDefault() {
}

var Raft_OperationsAppendEntriesArgs_Args__DEFAULT *AppendEntriesArgs_

func (p *Raft_OperationsAppendEntriesArgs) GetArgs_() (v *AppendEntriesArgs_) {
	if !p.IsSetArgs_() {
		return Raft_OperationsAppendEntriesArgs_Args__DEFAULT
	}
	return p.Args_
}
func (p *Raft_OperationsAppendEntriesArgs) SetArgs_(val *AppendEntriesArgs_) {
	p.Args_ = val
}

var fieldIDToName_Raft_OperationsAppendEntriesArgs = map[int16]string{
	1: "args",
}

func (p *Raft_OperationsAppendEntriesArgs) IsSetArgs_() bool {
	return p.Args_ != nil
}

func (p *Raft_OperationsAppendEntriesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Raft_OperationsAppendEntriesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Raft_OperationsAppendEntriesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewAppendEntriesArgs_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Args_ = _field
	return nil
}

func (p *Raft_OperationsAppendEntriesArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("AppendEntries_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Raft_OperationsAppendEntriesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("args", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Args_.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Raft_OperationsAppendEntriesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsAppendEntriesArgs(%+v)", *p)

}

func (p *Raft_OperationsAppendEntriesArgs) DeepEqual(ano *Raft_OperationsAppendEntriesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Args_) {
		return false
	}
	return true
}

func (p *Raft_OperationsAppendEntriesArgs) Field1DeepEqual(src *AppendEntriesArgs_) bool {

	if !p.Args_.DeepEqual(src) {
		return false
	}
	return true
}

type Raft_OperationsAppendEntriesResult struct {
	Success *AppendEntriesReply `thrift:"success,0,optional" frugal:"0,optional,AppendEntriesReply" json:"success,omitempty"`
}

func NewRaft_OperationsAppendEntriesResult() *Raft_OperationsAppendEntriesResult {
	return &Raft_OperationsAppendEntriesResult{}
}

func (p *Raft_OperationsAppendEntriesResult) InitDefault() {
}

var Raft_OperationsAppendEntriesResult_Success_DEFAULT *AppendEntriesReply

func (p *Raft_OperationsAppendEntriesResult) GetSuccess() (v *AppendEntriesReply) {
	if !p.IsSetSuccess() {
		return Raft_OperationsAppendEntriesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Raft_OperationsAppendEntriesResult) SetSuccess(x interface{}) {
	p.Success = x.(*AppendEntriesReply)
}

var fieldIDToName_Raft_OperationsAppendEntriesResult = map[int16]string{
	0: "success",
}

func (p *Raft_OperationsAppendEntriesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Raft_OperationsAppendEntriesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Raft_OperationsAppendEntriesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Raft_OperationsAppendEntriesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewAppendEntriesReply()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *Raft_OperationsAppendEntriesResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("AppendEntries_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Raft_OperationsAppendEntriesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *Raft_OperationsAppendEntriesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsAppendEntriesResult(%+v)", *p)

}

func (p *Raft_OperationsAppendEntriesResult) DeepEqual(ano *Raft_OperationsAppendEntriesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *Raft_OperationsAppendEntriesResult) Field0DeepEqual(src *AppendEntriesReply) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type Raft_OperationsInstallSnapshotArgs struct {
	Args_ *InstallSnapshotArgs_ `thrift:"args,1" frugal:"1,default,InstallSnapshotArgs_" json:"args"`
}

func NewRaft_OperationsInstallSnapshotArgs() *Raft_OperationsInstallSnapshotArgs {
	return &Raft_OperationsInstallSnapshotArgs{}
}

func (p *Raft_OperationsInstallSnapshotArgs) InitDefault() {
}

var Raft_OperationsInstallSnapshotArgs_Args__DEFAULT *InstallSnapshotArgs_

func (p *Raft_OperationsInstallSnapshotArgs) GetArgs_() (v *InstallSnapshotArgs_) {
	if !p.IsSetArgs_() {
		return Raft_OperationsInstallSnapshotArgs_Args__DEFAULT
	}
	return p.Args_
}
func (p *Raft_OperationsInstallSnapshotArgs) SetArgs_(val *InstallSnapshotArgs_) {
	p.Args_ = val
}

var fieldIDToName_Raft_OperationsInstallSnapshotArgs = map[int16]string{
	1: "args",
}

func (p *Raft_OperationsInstallSnapshotArgs) IsSetArgs_() bool {
	return p.Args_ != nil
}

func (p *Raft_OperationsInstallSnapshotArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Raft_OperationsInstallSnapshotArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Raft_OperationsInstallSnapshotArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewInstallSnapshotArgs_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Args_ = _field
	return nil
}

func (p *Raft_OperationsInstallSnapshotArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("InstallSnapshot_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Raft_OperationsInstallSnapshotArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("args", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Args_.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Raft_OperationsInstallSnapshotArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsInstallSnapshotArgs(%+v)", *p)

}

func (p *Raft_OperationsInstallSnapshotArgs) DeepEqual(ano *Raft_OperationsInstallSnapshotArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Args_) {
		return false
	}
	return true
}

func (p *Raft_OperationsInstallSnapshotArgs) Field1DeepEqual(src *InstallSnapshotArgs_) bool {

	if !p.Args_.DeepEqual(src) {
		return false
	}
	return true
}

type Raft_OperationsInstallSnapshotResult struct {
	Success *InstallSnapshotReply `thrift:"success,0,optional" frugal:"0,optional,InstallSnapshotReply" json:"success,omitempty"`
}

func NewRaft_OperationsInstallSnapshotResult() *Raft_OperationsInstallSnapshotResult {
	return &Raft_OperationsInstallSnapshotResult{}
}

func (p *Raft_OperationsInstallSnapshotResult) InitDefault() {
}

var Raft_OperationsInstallSnapshotResult_Success_DEFAULT *InstallSnapshotReply

func (p *Raft_OperationsInstallSnapshotResult) GetSuccess() (v *InstallSnapshotReply) {
	if !p.IsSetSuccess() {
		return Raft_OperationsInstallSnapshotResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Raft_OperationsInstallSnapshotResult) SetSuccess(x interface{}) {
	p.Success = x.(*InstallSnapshotReply)
}

var fieldIDToName_Raft_OperationsInstallSnapshotResult = map[int16]string{
	0: "success",
}

func (p *Raft_OperationsInstallSnapshotResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Raft_OperationsInstallSnapshotResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Raft_OperationsInstallSnapshotResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Raft_OperationsInstallSnapshotResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewInstallSnapshotReply()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *Raft_OperationsInstallSnapshotResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("InstallSnapshot_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Raft_OperationsInstallSnapshotResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *Raft_OperationsInstallSnapshotResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsInstallSnapshotResult(%+v)", *p)

}

func (p *Raft_OperationsInstallSnapshotResult) DeepEqual(ano *Raft_OperationsInstallSnapshotResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *Raft_OperationsInstallSnapshotResult) Field0DeepEqual(src *InstallSnapshotReply) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type Raft_OperationsPingpongtestArgs struct {
	Req *PingPongArgs_ `thrift:"req,1" frugal:"1,default,PingPongArgs_" json:"req"`
}

func NewRaft_OperationsPingpongtestArgs() *Raft_OperationsPingpongtestArgs {
	return &Raft_OperationsPingpongtestArgs{}
}

func (p *Raft_OperationsPingpongtestArgs) InitDefault() {
}

var Raft_OperationsPingpongtestArgs_Req_DEFAULT *PingPongArgs_

func (p *Raft_OperationsPingpongtestArgs) GetReq() (v *PingPongArgs_) {
	if !p.IsSetReq() {
		return Raft_OperationsPingpongtestArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Raft_OperationsPingpongtestArgs) SetReq(val *PingPongArgs_) {
	p.Req = val
}

var fieldIDToName_Raft_OperationsPingpongtestArgs = map[int16]string{
	1: "req",
}

func (p *Raft_OperationsPingpongtestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Raft_OperationsPingpongtestArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Raft_OperationsPingpongtestArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Raft_OperationsPingpongtestArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewPingPongArgs_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *Raft_OperationsPingpongtestArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Pingpongtest_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Raft_OperationsPingpongtestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Raft_OperationsPingpongtestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsPingpongtestArgs(%+v)", *p)

}

func (p *Raft_OperationsPingpongtestArgs) DeepEqual(ano *Raft_OperationsPingpongtestArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *Raft_OperationsPingpongtestArgs) Field1DeepEqual(src *PingPongArgs_) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type Raft_OperationsPingpongtestResult struct {
	Success *PingPongReply `thrift:"success,0,optional" frugal:"0,optional,PingPongReply" json:"success,omitempty"`
}

func NewRaft_OperationsPingpongtestResult() *Raft_OperationsPingpongtestResult {
	return &Raft_OperationsPingpongtestResult{}
}

func (p *Raft_OperationsPingpongtestResult) InitDefault() {
}

var Raft_OperationsPingpongtestResult_Success_DEFAULT *PingPongReply

func (p *Raft_OperationsPingpongtestResult) GetSuccess() (v *PingPongReply) {
	if !p.IsSetSuccess() {
		return Raft_OperationsPingpongtestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Raft_OperationsPingpongtestResult) SetSuccess(x interface{}) {
	p.Success = x.(*PingPongReply)
}

var fieldIDToName_Raft_OperationsPingpongtestResult = map[int16]string{
	0: "success",
}

func (p *Raft_OperationsPingpongtestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Raft_OperationsPingpongtestResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Raft_OperationsPingpongtestResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Raft_OperationsPingpongtestResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewPingPongReply()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *Raft_OperationsPingpongtestResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Pingpongtest_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Raft_OperationsPingpongtestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *Raft_OperationsPingpongtestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsPingpongtestResult(%+v)", *p)

}

func (p *Raft_OperationsPingpongtestResult) DeepEqual(ano *Raft_OperationsPingpongtestResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *Raft_OperationsPingpongtestResult) Field0DeepEqual(src *PingPongReply) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
